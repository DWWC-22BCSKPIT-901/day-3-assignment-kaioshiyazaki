/*
Q1. Write a Function to print first name and last name using function 
Q2. Find GCD of Number Using Function 
Q3. Longest Substring Without Repeating Characters
Q4. Maximum Subarray Product
Q5. There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
•	You are giving candies to these children subjected to the following requirements:
•	Each child must have at least one candy.
•	Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.
*/

#include <iostream>
#include <stdlib.h>
#include <algorithm>
#include <vector>

using namespace std;

void print_full_name(string first, string last){
    cout<<"Hello "<<first<<" "<<last<<"! You just delved into function"<<endl;
}

int gcdF(int a,int b){
    return b==0?a:gcdF(b,a%b);
}

int findGCDofMinMax(vector<int>& nums){
    int mn=*min_element(nums.begin(),nums.end());
    int mx=*max_element(nums.begin(),nums.end());
    return gcdF(mn,mx);
}

int lengthOfLongestSubstring(string s){
    vector<int> idx(256, -1);
    int res=0, start=0;
    for(int i=0;i<s.size();i++){
        if(idx[s[i]]>=start) start=idx[s[i]]+1;
        idx[s[i]]=i;
        res=max(res, i-start+1);
    }
    return res;
}

int maxProduct(vector<int>& nums){
    int ans=nums[0], mx=nums[0], mn=nums[0];
    for(int i=1;i<nums.size();i++){
        if(nums[i]<0) swap(mx,mn);
        mx=max(nums[i], mx*nums[i]);
        mn=min(nums[i], mn*nums[i]);
        ans=max(ans, mx);
    }
    return ans;
}

int candy(vector<int>& ratings){
    int n=ratings.size();
    vector<int> left(n,1), right(n,1);
    for(int i=1;i<n;i++){
        if(ratings[i]>ratings[i-1]) left[i]=left[i-1]+1;
    }
    for(int i=n-2;i>=0;i--){
        if(ratings[i]>ratings[i+1]) right[i]=right[i+1]+1;
    }
    int ans=0;
    for(int i=0;i<n;i++){
        ans+=max(left[i], right[i]);
    }
    return ans;
}

int main(){
    {
        string f="function", l="example";
        print_full_name(f,l);
    }
    {
        vector<int> nums1={2,5,6,9,10};
        cout<<findGCDofMinMax(nums1)<<endl;
        vector<int> nums2={7,5,6,8,3};
        cout<<findGCDofMinMax(nums2)<<endl;
        vector<int> nums3={3,3};
        cout<<findGCDofMinMax(nums3)<<endl;
    }
    {
        string s="abcabcbb";
        cout<<lengthOfLongestSubstring(s)<<endl;
    }
    {
        vector<int> nums={2,3,-2,4};
        cout<<maxProduct(nums)<<endl;
    }
    {
        vector<int> ratings1={1,0,2};
        cout<<candy(ratings1)<<endl;
        vector<int> ratings2={1,2,2};
        cout<<candy(ratings2)<<endl;
    }
    return 0;
}
